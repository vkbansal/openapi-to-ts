{% assign has_path_params = pathParams.props.length > 0 %}
{% assign has_query_params = queryParams.props.length > 0 %}

{% if config.customFetcher %}
import { {{config.customFetcher.name}} as _fetcher } from '{{config.customFetcher.path}}';
{% else %}
import { fetcher as _fetcher } from './fetcher';
{% endif %}

{% if has_path_params %}
{% render 'interface.liquid', name: pathParams.name, props: pathParams.props %}
{% endif %}

{% if queryParams.props.length > 0 %}
{% render 'interface.liquid', name: queryParams.name, props: queryParams.props %}
{% endif %}

{% if bodyCode %}
{{bodyCode}}
{% endif %}

export interface {{propsName}}
  extends Omit<RequestInit, 'method' | 'body'>
  {%- if has_path_params -%}, {{pathParams.name}}{%- endif -%}
  {
    {% if has_query_params -%}
    queryParams: {{queryParams.name}};
    paramsSerializer?: (params: {{queryParams.name}}) => string;
    {%- endif %}
    {% if bodyCode %}
    body: {{requestBodyName}};
    {%- endif %}
  }

{% render 'comments.liquid', schema: operation -%}
export async function {{fnName}}(props: {{propsName}}) {
  const {
  {% if has_path_params -%}
    {% for prop in pathParams.props -%}
    {{prop.key}},
    {%- endfor %}
  {%- endif %}
    ...rest
  } = props;



  return _fetcher<
    unknown,
    {% if has_query_params %}{{queryParams.name}}{% else %}unknown{% endif %},
    {% if bodyCode %}{{requestBodyName}}{% else %}unknown{% endif %}
  >({
    path: `{{ route | path_to_template }}`,
    method: {{ verb | upcase | json }},
    ...rest
  });
}
