/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import { DeploymentBranchPolicy } from '../schemas/DeploymentBranchPolicy';
import { DeploymentReviewerType } from '../schemas/DeploymentReviewerType';
import { WaitTimer } from '../schemas/WaitTimer';

export interface ReposCreateOrUpdateEnvironmentPathParams {
	owner: string;
	repo: string;
	environment_name: string;
}

export interface ReposCreateOrUpdateEnvironmentRequestBody {
	deployment_branch_policy?: DeploymentBranchPolicy;
	/**
	 * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	 */
	reviewers?: Array<{
		/**
		 * The id of the user or team who can review the deployment
		 * @example 4532992
		 */
		id?: number;
		type?: DeploymentReviewerType;
	}> | null;
	wait_timer?: WaitTimer;
}

export interface ReposCreateOrUpdateEnvironmentProps
	extends Omit<RequestInit, 'method' | 'body'>,
		ReposCreateOrUpdateEnvironmentPathParams {
	body: ReposCreateOrUpdateEnvironmentRequestBody;
}

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export async function reposCreateOrUpdateEnvironment(props: ReposCreateOrUpdateEnvironmentProps) {
	const { owner, repo, environment_name, body, ...rest } = props;

	const response = await fetch(`/repos/${owner}/${repo}/environments/${environment_name}`, {
		method: 'PUT',
		body: JSON.stringify(body),
		...rest,
		headers: {
			'Content-Type': 'application/json',
			...rest.headers,
		},
	});

	const json = await response.json();

	return json;
}
