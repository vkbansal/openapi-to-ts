/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.

export interface EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams {
	enterprise: string;
	scim_user_id: string;
}

export interface EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody {
	/**
	 * List of user emails.
	 */
	emails: Array<{
		/**
		 * Whether this email address is the primary address.
		 */
		primary: boolean;
		/**
		 * The type of email address.
		 */
		type: string;
		/**
		 * The email address.
		 */
		value: string;
	}>;
	/**
	 * List of SCIM group IDs the user is a member of.
	 */
	groups?: Array<{
		value?: string;
	}>;
	name: {
		/**
		 * The last name of the user.
		 */
		familyName: string;
		/**
		 * The first name of the user.
		 */
		givenName: string;
	};
	/**
	 * The SCIM schema URIs.
	 */
	schemas: string[];
	/**
	 * The username for the user.
	 */
	userName: string;
}

export interface EnterpriseAdminSetInformationForProvisionedEnterpriseUserProps
	extends Omit<RequestInit, 'method' | 'body'>,
		EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams {
	body: EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody;
}

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export async function enterpriseAdminSetInformationForProvisionedEnterpriseUser(
	props: EnterpriseAdminSetInformationForProvisionedEnterpriseUserProps,
) {
	const { enterprise, scim_user_id, body, ...rest } = props;

	const response = await fetch(`/scim/v2/enterprises/${enterprise}/Users/${scim_user_id}`, {
		method: 'PUT',
		body: JSON.stringify(body),
		...rest,
		headers: {
			'Content-Type': 'application/json',
			...rest.headers,
		},
	});

	const json = await response.json();

	return json;
}
