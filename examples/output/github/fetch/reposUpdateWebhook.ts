/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import type { WebhookConfigContentType } from '../schemas/WebhookConfigContentType';
import type { WebhookConfigInsecureSsl } from '../schemas/WebhookConfigInsecureSsl';
import type { WebhookConfigSecret } from '../schemas/WebhookConfigSecret';
import type { WebhookConfigUrl } from '../schemas/WebhookConfigUrl';

import { fetcher as _fetcher } from './fetcher';

export interface ReposUpdateWebhookPathParams {
	owner: string;
	repo: string;
	hook_id: number;
}

export interface ReposUpdateWebhookRequestBody {
	/**
	 * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	 * @default true
	 */
	active?: boolean;
	/**
	 * Determines a list of events to be added to the list of events that the Hook triggers for.
	 */
	add_events?: string[];
	/**
	 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
	 */
	config?: {
		/**
		 * @example "\"bar@example.com\""
		 */
		address?: string;
		content_type?: WebhookConfigContentType;
		insecure_ssl?: WebhookConfigInsecureSsl;
		/**
		 * @example "\"The Serious Room\""
		 */
		room?: string;
		secret?: WebhookConfigSecret;
		url: WebhookConfigUrl;
	};
	/**
	 * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
	 * @default ["push"]
	 */
	events?: string[];
	/**
	 * Determines a list of events to be removed from the list of events that the Hook triggers for.
	 */
	remove_events?: string[];
}

export interface ReposUpdateWebhookProps
	extends Omit<RequestInit, 'method' | 'body'>,
		ReposUpdateWebhookPathParams {
	body: ReposUpdateWebhookRequestBody;
}

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export async function reposUpdateWebhook(props: ReposUpdateWebhookProps) {
	const { owner, repo, hook_id, ...rest } = props;

	return _fetcher<unknown, unknown, ReposUpdateWebhookRequestBody>({
		path: `/repos/${owner}/${repo}/hooks/${hook_id}`,
		method: 'PATCH',
		...rest,
	});
}
