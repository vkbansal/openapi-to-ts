/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.

import { fetcher as _fetcher } from './fetcher';

export interface IssuesListQueryParams {
	/**
	 * @default "assigned"
	 */
	filter?: 'all' | 'assigned' | 'created' | 'mentioned' | 'repos' | 'subscribed';
	/**
	 * @default "open"
	 */
	state?: 'all' | 'closed' | 'open';
	labels?: string;
	/**
	 * @default "created"
	 */
	sort?: 'comments' | 'created' | 'updated';
	/**
	 * @default "desc"
	 */
	direction?: 'asc' | 'desc';
	since?: string;
	collab?: boolean;
	orgs?: boolean;
	owned?: boolean;
	pulls?: boolean;
	/**
	 * @default 30
	 */
	per_page?: number;
	/**
	 * @default 1
	 */
	page?: number;
}

export interface IssuesListProps extends Omit<RequestInit, 'method' | 'body'> {
	queryParams: IssuesListQueryParams;
	paramsSerializer?: (params: IssuesListQueryParams) => string;
}

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export async function issuesList(props: IssuesListProps) {
	const { ...rest } = props;

	return _fetcher<unknown, IssuesListQueryParams, unknown>({
		path: `/issues`,
		method: 'GET',
		...rest,
	});
}
