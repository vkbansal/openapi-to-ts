/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import { CodeScanningAnalysisToolName } from '../schemas/CodeScanningAnalysisToolName';
import { CodeScanningAnalysisToolGuid } from '../schemas/CodeScanningAnalysisToolGuid';
import { CodeScanningRef } from '../schemas/CodeScanningRef';
import { CodeScanningAlertState } from '../schemas/CodeScanningAlertState';

export interface CodeScanningListAlertsForRepoPathParams {
	owner: string;
	repo: string;
}

export interface CodeScanningListAlertsForRepoQueryParams {
	tool_name?: CodeScanningAnalysisToolName;
	tool_guid?: CodeScanningAnalysisToolGuid;
	/**
	 * @default 1
	 */
	page?: number;
	/**
	 * @default 30
	 */
	per_page?: number;
	ref?: CodeScanningRef;
	state?: CodeScanningAlertState;
}

export interface CodeScanningListAlertsForRepoProps
	extends Omit<RequestInit, 'method' | 'body'>,
		CodeScanningListAlertsForRepoPathParams {
	queryParams: CodeScanningListAlertsForRepoQueryParams;
}

/**
 * Lists all open code scanning alerts for the default branch (usually `main`
 * or `master`). You must use an access token with the `security_events` scope to use
 * this endpoint. GitHub Apps must have the `security_events` read permission to use
 * this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch or for the specified Git reference
 * (if you used `ref` in the request).
 */
export async function codeScanningListAlertsForRepo(props: CodeScanningListAlertsForRepoProps) {
	const { owner, repo, queryParams, ...rest } = props;

	const response = await fetch(`/repos/${owner}/${repo}/code-scanning/alerts`, {
		method: 'GET',
		...rest,
		headers: {
			'Content-Type': 'application/json',
			...rest.headers,
		},
	});

	const json = await response.json();

	return json;
}
