/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import { useMutation } from '@tanstack/react-query';

export interface UseReposCreateDispatchEventMutationPathParams {
	owner: string;
	repo: string;
}

export interface UseReposCreateDispatchEventMutationRequestBody {
	/**
	 * JSON payload with extra information about the webhook event that your action or worklow may use.
	 */
	client_payload?: { '[key: string]'?: any };
	/**
	 * A custom webhook event name.
	 */
	event_type: string;
}

export interface UseReposCreateDispatchEventMutationProps
	extends UseReposCreateDispatchEventMutationPathParams {
	body: UseReposCreateDispatchEventMutationRequestBody;
}

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */

export function useReposCreateDispatchEventMutation(
	props: UseReposCreateDispatchEventMutationProps,
) {
	return useMutation(() => Promise.resolve());
}
