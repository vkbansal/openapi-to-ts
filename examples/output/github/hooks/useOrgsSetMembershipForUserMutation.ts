/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import { useMutation } from '@tanstack/react-query';

export interface UseOrgsSetMembershipForUserMutationPathParams {
	org: string;
	username: string;
}

export interface UseOrgsSetMembershipForUserMutationRequestBody {
	/**
	 * The role to give the user in the organization. Can be one of:
	 * \* `admin` - The user will become an owner of the organization.
	 * \* `member` - The user will become a non-owner member of the organization.
	 * @default "member"
	 */
	role?: 'admin' | 'member';
}

export interface UseOrgsSetMembershipForUserMutationProps
	extends UseOrgsSetMembershipForUserMutationPathParams {
	body: UseOrgsSetMembershipForUserMutationRequestBody;
}

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */

export function useOrgsSetMembershipForUserMutation(
	props: UseOrgsSetMembershipForUserMutationProps,
) {
	return useMutation(() => Promise.resolve());
}
