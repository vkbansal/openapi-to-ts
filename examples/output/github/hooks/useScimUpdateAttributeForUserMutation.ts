/* eslint-disable */
// This code is autogenerated using @oa2ts/cli.
// Please do not modify this code directly.
import { useMutation } from '@tanstack/react-query';

export interface UseScimUpdateAttributeForUserMutationPathParams {
	org: string;
	scim_user_id: string;
}

export interface UseScimUpdateAttributeForUserMutationRequestBody {
	/**
	 * Set of operations to be performed
	 * @example [{"op":"replace","value":{"active":false}}]
	 */
	Operations: Array<{
		op: 'add' | 'remove' | 'replace';
		path?: string;
		value?: {
			active?: boolean | null;
			externalId?: string | null;
			familyName?: string | null;
			givenName?: string | null;
			userName?: string | null;
		} & Array<{
			primary?: boolean;
			value?: string;
		}> &
			string;
	}>;
	schemas?: string[];
}

export interface UseScimUpdateAttributeForUserMutationProps
	extends UseScimUpdateAttributeForUserMutationPathParams {
	body: UseScimUpdateAttributeForUserMutationRequestBody;
}

/**
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */

export function useScimUpdateAttributeForUserMutation(
	props: UseScimUpdateAttributeForUserMutationProps,
) {
	return useMutation(() => Promise.resolve());
}
